#!/usr/bin/env python3
"""
Script pour v√©rifier la configuration Kaggle
"""

import os
import json
from pathlib import Path

def check_kaggle_installation():
    """V√©rifie si kaggle est install√©"""
    try:
        import kaggle
        print("‚úÖ Package kaggle install√©")
        return True
    except ImportError:
        print("‚ùå Package kaggle non install√©")
        print("   Installez avec: pip install kaggle")
        return False

def check_kaggle_credentials():
    """V√©rifie si les credentials Kaggle sont configur√©s"""
    # Chemins possibles pour kaggle.json
    home_dir = Path.home()
    kaggle_dir = home_dir / ".kaggle"
    kaggle_json = kaggle_dir / "kaggle.json"
    
    # V√©rifier aussi dans le r√©pertoire courant
    current_kaggle_json = Path("kaggle.json")
    
    print(f"üîç Recherche de kaggle.json dans:")
    print(f"   - {kaggle_json}")
    print(f"   - {current_kaggle_json}")
    
    if kaggle_json.exists():
        print(f"‚úÖ Fichier kaggle.json trouv√©: {kaggle_json}")
        return check_kaggle_json_content(kaggle_json)
    elif current_kaggle_json.exists():
        print(f"‚úÖ Fichier kaggle.json trouv√©: {current_kaggle_json}")
        print("‚ö†Ô∏è D√©placez le fichier vers ~/.kaggle/ pour plus de s√©curit√©")
        return check_kaggle_json_content(current_kaggle_json)
    else:
        print("‚ùå Fichier kaggle.json non trouv√©")
        print("üìù Pour cr√©er kaggle.json:")
        print("   1. Allez sur https://www.kaggle.com/")
        print("   2. Connectez-vous √† votre compte")
        print("   3. Allez dans Account > API")
        print("   4. Cliquez sur 'Create New API Token'")
        print("   5. Placez le fichier t√©l√©charg√© dans ~/.kaggle/")
        return False

def check_kaggle_json_content(kaggle_json_path):
    """V√©rifie le contenu du fichier kaggle.json"""
    try:
        with open(kaggle_json_path, 'r') as f:
            config = json.load(f)
        
        required_keys = ['username', 'key']
        missing_keys = [key for key in required_keys if key not in config]
        
        if missing_keys:
            print(f"‚ùå Cl√©s manquantes dans kaggle.json: {missing_keys}")
            return False
        
        print("‚úÖ Fichier kaggle.json valide")
        print(f"   Username: {config['username']}")
        print(f"   Key: {'*' * len(config['key'])}")
        
        # V√©rifier les permissions (Unix/Linux/Mac)
        if os.name != 'nt':  # Pas Windows
            stat = kaggle_json_path.stat()
            permissions = oct(stat.st_mode)[-3:]
            if permissions != '600':
                print(f"‚ö†Ô∏è Permissions incorrectes: {permissions}")
                print("   Ex√©cutez: chmod 600 ~/.kaggle/kaggle.json")
            else:
                print("‚úÖ Permissions correctes (600)")
        
        return True
        
    except json.JSONDecodeError:
        print("‚ùå Fichier kaggle.json invalide (format JSON incorrect)")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture de kaggle.json: {e}")
        return False

def test_kaggle_api():
    """Teste l'API Kaggle"""
    try:
        import kaggle
        print("üß™ Test de l'API Kaggle...")
        
        # Tester une commande simple
        kaggle.api.authenticate()
        print("‚úÖ Authentification Kaggle r√©ussie")
        
        # Tester la recherche du dataset
        datasets = kaggle.api.dataset_list(search='telco customer churn', user='blastchar')
        if datasets:
            print("‚úÖ Dataset 'blastchar/telco-customer-churn' trouv√©")
            dataset = datasets[0]
            print(f"   Titre: {dataset.title}")
            print(f"   Taille: {dataset.size}")
            print(f"   Derni√®re mise √† jour: {dataset.lastUpdated}")
        else:
            print("‚ö†Ô∏è Dataset non trouv√© dans la recherche")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'API: {e}")
        return False

def main():
    """Fonction principale"""
    print("üîß V√©rification de la configuration Kaggle")
    print("=" * 50)
    
    success_count = 0
    total_checks = 3
    
    # 1. V√©rifier l'installation
    if check_kaggle_installation():
        success_count += 1
    
    print()
    
    # 2. V√©rifier les credentials
    if check_kaggle_credentials():
        success_count += 1
    
    print()
    
    # 3. Tester l'API
    if success_count == 2:  # Seulement si les 2 premiers checks sont OK
        if test_kaggle_api():
            success_count += 1
    else:
        print("‚è≠Ô∏è Test de l'API ignor√© (pr√©requis non satisfaits)")
    
    print()
    print("=" * 50)
    print(f"üìä R√©sultat: {success_count}/{total_checks} v√©rifications r√©ussies")
    
    if success_count == total_checks:
        print("üéâ Configuration Kaggle compl√®te et fonctionnelle!")
        print("Vous pouvez maintenant t√©l√©charger le dataset avec:")
        print("   python src/data/dataset.py")
    else:
        print("‚ö†Ô∏è Configuration incompl√®te. Suivez les instructions ci-dessus.")

if __name__ == "__main__":
    main()
